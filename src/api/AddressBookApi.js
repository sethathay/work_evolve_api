/**
 * workEvolve API
 * workEvolve Restful API generated by Swagger
 *
 * OpenAPI spec version: 0.1.0
 * Contact: development@workevolve.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.WorkEvolveApi) {
      root.WorkEvolveApi = {};
    }
    root.WorkEvolveApi.AddressBookApi = factory(root.WorkEvolveApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * AddressBook service.
   * @module api/AddressBookApi
   * @version 0.1.0
   */

  /**
   * Constructs a new AddressBookApi. 
   * @alias module:api/AddressBookApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getAddressBookById operation.
     * @callback module:api/AddressBookApi~getAddressBookByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get addressbook by id
     * @param {String} tenantId id of tenant to filter by
     * @param {String} addressBookId id of addressbook to filter by
     * @param {module:api/AddressBookApi~getAddressBookByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getAddressBookById = function(tenantId, addressBookId, callback) {
      var postBody = null;

      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling getAddressBookById");
      }

      // verify the required parameter 'addressBookId' is set
      if (addressBookId === undefined || addressBookId === null) {
        throw new Error("Missing the required parameter 'addressBookId' when calling getAddressBookById");
      }


      var pathParams = {
        'tenantId': tenantId,
        'addressBookId': addressBookId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['default'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/tenants/{tenantId}/addressbooks/{addressBookId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllAddressBooks operation.
     * @callback module:api/AddressBookApi~getAllAddressBooksCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get all addressbooks
     * @param {String} tenantId id of tenant to filter by
     * @param {Object} opts Optional parameters
     * @param {Object} opts.filter filter addressbooks by condition provided
     * @param {Number} opts.offset The number of items to skip before starting to collect the result set (default to 0)
     * @param {Number} opts.limit The number of items to return (default to 25)
     * @param {module:api/AddressBookApi~getAllAddressBooksCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getAllAddressBooks = function(tenantId, opts, callback) {
      opts = opts || {};
      var postBody = opts['filter'];

      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling getAllAddressBooks");
      }


      var pathParams = {
        'tenantId': tenantId
      };
      var queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['default'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/tenants/{tenantId}/addressbooks/get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the removeAddressBookById operation.
     * @callback module:api/AddressBookApi~removeAddressBookByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete addressbook by id
     * @param {String} tenantId id of tenant to filter by
     * @param {String} addressBookId id of addressbook to filter by
     * @param {module:api/AddressBookApi~removeAddressBookByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.removeAddressBookById = function(tenantId, addressBookId, callback) {
      var postBody = null;

      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling removeAddressBookById");
      }

      // verify the required parameter 'addressBookId' is set
      if (addressBookId === undefined || addressBookId === null) {
        throw new Error("Missing the required parameter 'addressBookId' when calling removeAddressBookById");
      }


      var pathParams = {
        'tenantId': tenantId,
        'addressBookId': addressBookId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['default'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/tenants/{tenantId}/addressbooks/{addressBookId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the saveAddressBook operation.
     * @callback module:api/AddressBookApi~saveAddressBookCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * save a new addressbook
     * @param {String} tenantId id of tenant to filter by
     * @param {Object} data provide your addressbook data information to save
     * @param {module:api/AddressBookApi~saveAddressBookCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.saveAddressBook = function(tenantId, data, callback) {
      var postBody = data;

      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling saveAddressBook");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling saveAddressBook");
      }


      var pathParams = {
        'tenantId': tenantId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['default'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/tenants/{tenantId}/addressbooks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAddressBook operation.
     * @callback module:api/AddressBookApi~updateAddressBookCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * update addressbook by id
     * @param {String} tenantId id of tenant to filter by
     * @param {String} addressBookId id of addressbook to filter by
     * @param {Object} data provide your addressbook data information to update
     * @param {module:api/AddressBookApi~updateAddressBookCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateAddressBook = function(tenantId, addressBookId, data, callback) {
      var postBody = data;

      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling updateAddressBook");
      }

      // verify the required parameter 'addressBookId' is set
      if (addressBookId === undefined || addressBookId === null) {
        throw new Error("Missing the required parameter 'addressBookId' when calling updateAddressBook");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling updateAddressBook");
      }


      var pathParams = {
        'tenantId': tenantId,
        'addressBookId': addressBookId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['default'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/tenants/{tenantId}/addressbooks/{addressBookId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
